<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aditya Anand</title>
    <link>https://adityaanand7.github.io/research/</link>
    <description>Recent content on Aditya Anand</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>Â© Aditya Anand 2023. &lt;a href=&#39;https://adityaanand7.github.io/privacy&#39;&gt;Privacy policy&lt;/a&gt;.</copyright>
    <lastBuildDate>Wed, 16 Jul 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://adityaanand7.github.io/research/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Invisible Steps: How Java Really Allocates Your Objects</title>
      <link>https://adityaanand7.github.io/research/general/java_objects/</link>
      <pubDate>Wed, 16 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://adityaanand7.github.io/research/general/java_objects/</guid>
      <description>&lt;p&gt;In Java, when you allocate an object using the &lt;code&gt;new&lt;/code&gt; keyword, a complex series of steps takes place behind the scenes involving &lt;strong&gt;bytecode interpretation or JIT compilation, memory management, and synchronization with the garbage collector&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-new-bytecode-instruction&#34;&gt;&#xA;  1. &lt;code&gt;new&lt;/code&gt; Bytecode Instruction&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#1-new-bytecode-instruction&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;When you write:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;A obj &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; A();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Java compiler compiles this to JVM bytecode like:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;new A           // allocate memory, pushes uninitialized object reference onto stack&#xA;dup             // duplicates the reference, one for the constructor, one for the variable &amp;#39;obj&amp;#39;&#xA;invokespecial   // calls the constructor (e.g., A.&amp;lt;init&amp;gt;())&#xA;astore_1        // stores the object reference into local variable &amp;#39;obj&amp;#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This sequence of bytecodes is then executed by either the interpreter or the Just-In-Time (JIT) compiled code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Write Barriers in JIT Compilers</title>
      <link>https://adityaanand7.github.io/research/general/write_barriers/</link>
      <pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://adityaanand7.github.io/research/general/write_barriers/</guid>
      <description>&lt;p&gt;In languages like Java where garbage collector (GC) is used for cleaning up the unused references. The idea of write barriers is used at runtime to communicate with GC for letting the GC know the set of objects that needs to be tracked due to object pointers getting stored in another object and classes.&lt;/p&gt;&#xA;&lt;p&gt;The JIT compiler is required to insert a write barrier in the code which it generates to maintain the function correctness.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Conferences, Journals and Workshops (For PL and Compilers)</title>
      <link>https://adityaanand7.github.io/research/general/conference/</link>
      <pubDate>Sat, 15 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://adityaanand7.github.io/research/general/conference/</guid>
      <description>&lt;style&gt;&#xA;  :root {&#xA;    --primary-color: #007bff;&#xA;    --header-bg-color: #333;&#xA;    --header-text-color: #fff;&#xA;    --odd-row-bg-color: #f1f1f1;&#xA;    --even-row-bg-color: #ffffff;&#xA;    --hover-bg-color: #e9ecef;&#xA;    --text-color: #333;&#xA;    --border-color: #ddd;&#xA;    --alt-text-color: #666;&#xA;  }&#xA;&#xA;  body {&#xA;    color: var(--text-color);&#xA;    background-color: #f8f9fa; /* Light background color */&#xA;  }&#xA;&#xA;  table {&#xA;    width: 100%;&#xA;    border-collapse: collapse;&#xA;    margin: 20px 0;&#xA;    font-size: 16px;&#xA;    text-align: left;&#xA;    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);&#xA;    border-radius: 8px;&#xA;    overflow: hidden;&#xA;    background-color: #ffffff;&#xA;    color: var(--text-color);&#xA;  }&#xA;&#xA;  th, td {&#xA;    border: 1px solid var(--border-color);&#xA;    padding: 12px;&#xA;  }&#xA;&#xA;  th {&#xA;    background-color: var(--header-bg-color);&#xA;    color: var(--header-text-color);&#xA;    text-align: center;&#xA;  }&#xA;&#xA;  td {&#xA;    background-color: var(--even-row-bg-color);&#xA;  }&#xA;&#xA;  tr:nth-child(even) td {&#xA;    background-color: var(--odd-row-bg-color);&#xA;  }&#xA;&#xA;  tr:hover td {&#xA;    background-color: var(--hover-bg-color);&#xA;  }&#xA;&#xA;  a {&#xA;    color: var(--primary-color);&#xA;    text-decoration: none;&#xA;    font-weight: bold;&#xA;  }&#xA;&#xA;  a:hover {&#xA;    text-decoration: underline;&#xA;  }&#xA;&lt;/style&gt;&#xA;&lt;h2 id=&#34;conferences&#34;&gt;&#xA;  Conferences:&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#conferences&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;th&gt;Sl.No.&lt;/th&gt;&#xA;      &lt;th&gt;Conference&lt;/th&gt;&#xA;      &lt;th&gt;Submission&lt;/th&gt;&#xA;      &lt;th&gt;Core Rank (2020)&lt;/th&gt;&#xA;      &lt;th&gt;Scope of the Conference&lt;/th&gt;&#xA;    &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;1&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://popl24.sigplan.org/&#34;&gt;POPL&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;July&lt;/td&gt;&#xA;      &lt;td&gt;A*&lt;/td&gt;&#xA;      &lt;td&gt;Programming languages and systems (both theoretical and experimental papers).&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;2&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://pldi24.sigplan.org/&#34;&gt;PLDI&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;November&lt;/td&gt;&#xA;      &lt;td&gt;A*&lt;/td&gt;&#xA;      &lt;td&gt;All programming-language concepts, novel system designs, thorough empirical work, well-motivated theoretical results, and new application areas.&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;2&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://2024.splashcon.org/&#34;&gt;OOPSLA&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;October and April&lt;/td&gt;&#xA;      &lt;td&gt;A*&lt;/td&gt;&#xA;      &lt;td&gt;All practical and theoretical investigations of programming languages, systems, and environments.&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;3&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://conf.researchr.org/home/ecoop-issta-2024&#34;&gt;ECOOP&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;December and March&lt;/td&gt;&#xA;      &lt;td&gt;A&lt;/td&gt;&#xA;      &lt;td&gt;Originally focused on object-orientation, now includes all practical and theoretical investigations of programming languages, systems, and environments.&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;5&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://conf.researchr.org/home/sas-2023&#34;&gt;SAS&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;May&lt;/td&gt;&#xA;      &lt;td&gt;A&lt;/td&gt;&#xA;      &lt;td&gt;Program verification, abstract interpretation, compiler optimization, model-checking, type checking, etc.&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;6&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://conf.researchr.org/home/cgo-2024&#34;&gt;CGO&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;May and September&lt;/td&gt;&#xA;      &lt;td&gt;A&lt;/td&gt;&#xA;      &lt;td&gt;Code generation, translation, transformation, and optimization. Includes dynamic/static, profile-guided, feedback-directed, and hybrid analysis.&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;7&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://conf.researchr.org/home/cgo-2024&#34;&gt;CC&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;November&lt;/td&gt;&#xA;      &lt;td&gt;A&lt;/td&gt;&#xA;      &lt;td&gt;Compilation and interpretation techniques, runtime techniques, programming tools, design, and implementation.&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;8&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://conf.researchr.org/home/ismm-2024&#34;&gt;ISMM&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;March&lt;/td&gt;&#xA;      &lt;td&gt;A&lt;/td&gt;&#xA;      &lt;td&gt;Memory management, covering the areas of memory performance, allocator design, garbage collection, architectural support for memory management, persistent memories, emerging memory technologies, and more.&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;9&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://icfp24.sigplan.org/&#34;&gt;ICFP&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;March&lt;/td&gt;&#xA;      &lt;td&gt;A&lt;/td&gt;&#xA;      &lt;td&gt;Language design, implementation, software-development techniques, foundations, analysis and transformation, applications, education, etc.&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;10&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://pact2023.github.io/&#34;&gt;PACT&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;March&lt;/td&gt;&#xA;      &lt;td&gt;A&lt;/td&gt;&#xA;      &lt;td&gt;Parallel architectures, compilers and tools for parallel computer systems, insights for the design of parallel architectures and compilers from modern parallel applications, neuromorphic computing.&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;11&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://conf.researchr.org/home/ppopp-2024&#34;&gt;PPOPP&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;August&lt;/td&gt;&#xA;      &lt;td&gt;A&lt;/td&gt;&#xA;      &lt;td&gt;Compilers and runtime systems for parallel and heterogeneous systems, development, analysis, or management tools, performance analysis, debugging and optimization, formal analysis and verification.&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;  &lt;tr&gt;&#xA;      &lt;td&gt;12&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://www.sigplan.org/Conferences/DLS/&#34;&gt;DLS&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;June&lt;/td&gt;&#xA;      &lt;td&gt;B&lt;/td&gt;&#xA;      &lt;td&gt;Research and experience on all aspects on dynamic languages&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;&lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;journals&#34;&gt;&#xA;  Journals:&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#journals&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;th&gt;Sl.No.&lt;/th&gt;&#xA;      &lt;th&gt;Journal&lt;/th&gt;&#xA;      &lt;th&gt;Submission&lt;/th&gt;&#xA;      &lt;th&gt;Core Rank (2020)&lt;/th&gt;&#xA;      &lt;th&gt;Scope of the Journal&lt;/th&gt;&#xA;    &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;1&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://dl.acm.org/journal/toplas&#34;&gt;TOPLAS&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;All year&lt;/&gt;&#xA;      &lt;td&gt;A*&lt;/td&gt;&#xA;      &lt;td&gt;All works on the theory and practice of programming languages, inclusive of their semantics, their implementation and their verification.&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;2&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://dl.acm.org/journal/taco&#34;&gt;TACO&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;All year&lt;/&gt;&#xA;      &lt;td&gt;A*&lt;/td&gt;&#xA;      &lt;td&gt;All hardware, software, and system research spanning the fields of computer architecture and code optimization.&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;3&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://link.springer.com/journal/10703&#34;&gt;FMSD&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;All year&lt;/&gt;&#xA;      &lt;td&gt;A&lt;/td&gt;&#xA;      &lt;td&gt;Formal methods for designing, implementing, and validating hardware and software system.Works describing original work in all aspects of formal methods as they relate to system design&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;4&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://www.sciencedirect.com/journal/science-of-computer-programming&#34;&gt;SCP&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;All year&lt;/&gt;&#xA;      &lt;td&gt;A&lt;/td&gt;&#xA;      &lt;td&gt;All work on design, implementation and evaluation of programming languages. Along with programming environments, development tools, visualisation and animation.&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;5&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://dl.acm.org/journal/csur/author-guidelines&#34;&gt;CSUR&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;All year&lt;/&gt;&#xA;      &lt;td&gt;A*&lt;/td&gt;&#xA;      &lt;td&gt;All surveys and tutorials on areas of computing research or practice.&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;workshops&#34;&gt;&#xA;  Workshops:&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#workshops&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;th&gt;Sl.No.&lt;/th&gt;&#xA;      &lt;th&gt;Workshop&lt;/th&gt;&#xA;      &lt;th&gt;Submission&lt;/th&gt;&#xA;      &lt;th&gt;Core Rank (2020)&lt;/th&gt;&#xA;      &lt;th&gt;Scope of the Workshop&lt;/th&gt;&#xA;    &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;1&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://2024.splashcon.org/home/vmil-2024&#34;&gt;VMIL&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;March&lt;/td&gt;&#xA;      &lt;td&gt;Unranked&lt;/td&gt;&#xA;      &lt;td&gt;All works on the specification, implementation, and deployment of virtual machines.&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;2&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://pldi24.sigplan.org/home/SOAP-2024&#34;&gt;SOAP&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;August&lt;/&gt;&#xA;      &lt;td&gt;Unranked&lt;/td&gt;&#xA;      &lt;td&gt;All works on analysis framework ideas, application of existing static analysis techniques to industrial software, adoption of static analysis in software engineering practices (such as DevOps), innovative designs, and analysis techniques, including preliminary results or work in progress.&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
  </channel>
</rss>
